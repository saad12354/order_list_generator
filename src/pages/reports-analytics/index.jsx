import React, { useState } from 'react';
import { Helmet } from 'react-helmet';
import BottomTabNavigation from '../../components/ui/BottomTabNavigation';
import ReportGenerationPanel from './components/ReportGenerationPanel';
import InventorySummaryCard from './components/InventorySummaryCard';
import ReportPreview from './components/ReportPreview';
import AnalyticsCharts from './components/AnalyticsCharts';
import FilterControls from './components/FilterControls';

const ReportsAnalytics = () => {
  const [generatedReport, setGeneratedReport] = useState(null);
  const [isGenerating, setIsGenerating] = useState(false);
  const [appliedFilters, setAppliedFilters] = useState(null);

  const handleGenerateReport = async (reportData) => {
    setIsGenerating(true);
    
    // Simulate report generation
    setTimeout(() => {
      setGeneratedReport(reportData);
      setIsGenerating(false);
    }, 2000);
  };

  const handleExportReport = () => {
    if (!generatedReport) return;
    
    const reportText = `HVAC INVENTORY REPORT\n\nClient: ${generatedReport?.clientName}\nLocation: ${generatedReport?.jobSite}\nDate: ${generatedReport?.projectDate}\n\nGenerated by HVAC Inventory Manager`;
    
    navigator.clipboard?.writeText(reportText)?.then(() => {
      alert('Report copied to clipboard!');
    })?.catch(() => {
      alert('Failed to copy report');
    });
  };

  const handlePrintReport = () => {
    window.print();
  };

  const handleShareReport = () => {
    if (!generatedReport) return;
    
    const reportText = `HVAC Inventory Report for ${generatedReport?.clientName} at ${generatedReport?.jobSite}. Generated on ${new Date()?.toLocaleDateString()}.`;
    const whatsappUrl = `https://wa.me/?text=${encodeURIComponent(reportText)}`;
    window.open(whatsappUrl, '_blank');
  };

  const handleApplyFilters = (filters) => {
    setAppliedFilters(filters);
    // In a real app, this would trigger data refetch with filters
    console.log('Applied filters:', filters);
  };

  const handleResetFilters = () => {
    setAppliedFilters(null);
    // In a real app, this would reset data to unfiltered state
    console.log('Filters reset');
  };

  return (
    <>
      <Helmet>
        <title>Reports & Analytics - HVAC Inventory Manager</title>
        <meta name="description" content="Generate professional HVAC inventory reports and analyze usage patterns for client communication and project tracking." />
      </Helmet>

      <div className="min-h-screen bg-background">
        {/* Desktop Layout */}
        <div className="lg:ml-64">
          <div className="container mx-auto px-4 py-6 lg:py-8 pb-20 lg:pb-8">
            {/* Header */}
            <div className="mb-8">
              <h1 className="text-2xl lg:text-3xl font-bold text-foreground mb-2">
                Reports & Analytics
              </h1>
              <p className="text-muted-foreground">
                Generate professional documentation and analyze inventory usage patterns
              </p>
            </div>

            {/* Main Content Grid */}
            <div className="grid grid-cols-1 xl:grid-cols-3 gap-6">
              {/* Left Column - Report Generation & Filters */}
              <div className="xl:col-span-1 space-y-6">
                <ReportGenerationPanel 
                  onGenerateReport={handleGenerateReport}
                  isGenerating={isGenerating}
                />
                
                <FilterControls 
                  onApplyFilters={handleApplyFilters}
                  onResetFilters={handleResetFilters}
                />
              </div>

              {/* Right Column - Preview & Analytics */}
              <div className="xl:col-span-2 space-y-6">
                <ReportPreview 
                  reportData={generatedReport}
                  onExport={handleExportReport}
                  onPrint={handlePrintReport}
                  onShare={handleShareReport}
                />
                
                <InventorySummaryCard inventoryData={appliedFilters} />
                
                <AnalyticsCharts />
              </div>
            </div>
          </div>
        </div>

        {/* Navigation */}
        <BottomTabNavigation />
      </div>
    </>
  );
};

export default ReportsAnalytics;